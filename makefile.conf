#############################################################################
#  DESCRIPTION  : ADXM configuration file
#  COPYRIGHT    : Andy Thomas (c) 2016
#  WEBSITE      : bigangrydog.com
#############################################################################

################################
# INFORMATION
################################
#
# This is a configuration file. Do not call make against this directly.
# See the makefile.readme.txt file for instructions.
#
# PLATFORM VARIABLES
# The following environment variables are pre-defined by ADXM and are
# available for use with the configuration settings below. DO NOT MODIFY.
# For example, $(ARCH) could be used to specify an output directory or source
# name with a "32" or "64" component according to the target platform.
#
# $(MAKE_ROOT)          - Fully qualified directory of makefile. Note that this need
#                         not necessarily be the same as the working directory.
# $(TARGET)             - Build target, always "release" or "debug" in user supplied case.
# $(UTARGET)            - Uppercase of $(TARGET), i.e. "DEBUG".
# $(LTARGET)            - Lowercase of $(TARGET), i.e. "debug".
# $(STARGET)            - Short variant of $(TARGET), always "rel" or "dbg".
# $(ARCH)               - Target architecture, always "64" or "32".
# $(PLATOS) -           - User supplied target OS name. Defaults to $(BUILD_PLATOS).
# $(UPLATOS) -          - Uppercase of $(PLATOS) for convenience.
# $(LPLATOS) -          - Lowercase of $(PLATOS) for convenience.
# $(BUILD_PLATOS)       - Build platform, always "msw" or "nix" irrespective of user input.
# $(BUILD_PLATOS_VAR)   - Variation of $(BUILD_PLATOS), always "win" or "linux".
# $(BUILD_PLATOS_UVAR)  - Uppercase of $(BUILD_PLATOS_VAR) for convenience.
# $(BUILD_PLATOS_LONG)  - Long equivalent of $(BUILD_PLATOS), always "windows" or "linux".
# $(BUILD_PLATOS_ULONG) - Uppercase of $(BUILD_PLATOS_LONG) for convenience.
# $(SHELL_HOSTNAME)     - Hostname taken from the shell.
# $(SHELL_DATE)         - Date taken from the shell in short format (locale specific on Windows).
# $(SHELL_TIME)         - Time taken from the shell in short format (locale specific on Windows).
# $(SHELL_YEAR)         - Year taken from the shell.
# $(SPACE)              - Literal space character
# $(ADXM_VERSION)       - Major version number of ADXM.

################################
# a. PROJECT CONFIGURATION
################################

# PROJECT BUILD NAME
# Mandatory base name for the project output file, excluding any extension
# (or prefix) as it will be added automatically. For example, if "myapp" is
# specified for an executable project, the resulting binary will be called
# "myapp.exe" on Windows, and just "myapp" on LINUX. If "test" is used for a
# static library project, the output file will be automatically prefixed
# with "lib" to create "libtest.a" on both LINUX and MinGW. For a shared
# library, the output will be "test.dll" under Windows, and "libtest.so"
# under LINUX. You may use the $(ARCH) variable, if you wish, to define a
# name containing the value "64" or "32". Finally, note that debug builds
# will, by default, be suffixed with "-d" (see the DBGOUT_SFX settings
# below to change this setting.)
BUILD_BASENAME = myproj

# PROJECT TYPE
# The project build type. Must be one of the following:
#   exe   - Build an executable binary. On windows the output will have
#           the extension ".exe".
#   lib   - Static library. The output will have the extension ".a", and
#           on LINUX, it will be prefixed with "lib".
#   so    - Shared library. On Windows, this generate a DLL, plus its
#           associated import library.
#   mst   - A special type of project that servers a "master" which will
#           build sub-modules. With this, the compile, link and clean
#           steps will be ignored, but it will create output directories,
#           if specifed, call dependent make configurations and perform
#           custom build steps.
BUILD_TYPE = exe

# PRODUCT VERSION FILE
# An additional configuration file used to provide a common place to set custom
# application name, version and copyright variables for your application:
# - $(APP_NAME)
# - $(APP_VERSION)
# - $(APP_COPYRIGHT)
# If specified, these values will automatically be declared as pre-defined macros
# if in your source code (using the compiler "-D" flag). This file is also the
# place to specify additional custom variables that can be used in all configuration
# files which include it. The version file should be located in the same
# directory as this one, or relative to it. There's no need to explicitly use
# the $(MAKE_ROOT) in the COMMON_CONF value, as the makefile will look there
# automatically. If unspecified, this option is ignored. Example value: makevars.conf
COMMON_CONF = makevars.conf

# SHARED LIBRARY NAME
# This setting is used only on LINUX to set the "soname" (logical name) field for
# shared libraries. It should normally be prefixed with "lib", and can be can to:
# "lib$(BUILD_BASENAME).so", so that the name follows the build name. It can also be
# left blank and is ignored under Windows. Example: lib$(BUILD_BASENAME).so.1
NIX_SONAME =

################################
# b. DIRECTORY LOCATIONS
################################

# INFORMATION: All directory locations should ideally be defined relative to $(MAKE_ROOT),
# which will make them relative to the makefile, rather than the working directory. Absolute
# paths are not recommended for portability reasons. Likewise, always use forward slash '/'
# path separator (rather than '\') even under Windows. IMPORTANT: Pathnames containing
# spaces are NOT SUPPORTED.

# SOURCE ROOT
# Mandatory source file root directory. All source files MUST BE contained under this location,
# either directly or within a hierarchy under it. Example: $(MAKE_ROOT)/src
SRC_ROOT = $(MAKE_ROOT)/src

# OUTPUT DIRECTORY
# Mandatory final output directory. This directory will be created if it does not exist.
# Example: $(MAKE_ROOT)/bin
OUT_DIR = $(MAKE_ROOT)/bin

# OBJECT DIRECTORY
# Mandatory object directory for temporary build files. This directory will be created if it
# does not exist. There is no need to be concerned about sharing this directory between
# builds targeting different platforms, as all temporary build files are distinguished
# using a platform specific naming convention. Example: $(MAKE_ROOT)/obj
OBJ_DIR = $(MAKE_ROOT)/obj

# COMMON INCLUDE DIRECTORIES
# One or more optional common include directories, separated by space. These will be
# included for both MSW and LINUX builds. Use the $(MAKE_ROOT) variable to make them
# relative the makefile. There is no need to specify this if all "inc" files reside
# in the same directory as their "cpp" counterparts. Example: $(MAKE_ROOT)/inc
INC_COM_DIRS =

# PLATFORM INCLUDE DIRECTORIES
# Append additional platform specific include directories here, but do not remove
# the INC_COM_DIRS variable. Example for MSW: $(INC_COM_DIRS) $(MAKE_ROOT)/win32
INC_NIX_DIRS = $(INC_COM_DIRS)
INC_MSW_DIRS = $(INC_COM_DIRS)

# CREATE ADDITIONAL DIRECTORIES
# One or more custom directories, separated by space, to be created during the make.
# This can be used to create additional directories needed by the project, but
# not otherwise specified. For example, it may be used to ensure that the directory
# "${OUT_DIR}/log" is created for use by the binary when it runs.
CUSTOM_DIRS =

################################
# c. SOURCE FILES
################################

# COMMON SOURCES
# List source files (i.e. *.c or *.cpp) common to all platforms, separated by space.
# These MUST BE contained within the $(SRC_ROOT) directory, or within a sub-directory
# of it. You can either list files individually, for example:
# "SRC_COM_FILES = main.cpp utils/file_utils.cpp". If you specify files individually,
# like this, there's need to use $(SRC_ROOT) variable as a prefix (although you can).
# Alternatively, the following wildcard specification will automatically pull in all
# cpp files directly under the root directory: "$(wildcard $(SRC_ROOT)/*.cpp)", whereas
# "$(wildcard $(SRC_ROOT)/*.cpp) $(wildcard $(SRC_ROOT)*/*.cpp)" will work to any depth.
SRC_COM_FILES = $(wildcard $(SRC_ROOT)/*.cpp)

# PLATFORM SOURCES
# Append additional platform specific source files relative to $(SRC_ROOT),
# but not remove the SRC_COM_DIRS variable. Example for MSW: $(SRC_COM_FILES) msw/win_utils.cpp
SRC_NIX_FILES = $(SRC_COM_FILES)
SRC_MSW_FILES = $(SRC_COM_FILES)

# RESOURCES
# Specify Windows resource (*rc) files relative to $(SRC_ROOT). These will be
# built and linked under MSW only. This parameter is ignored under LINUX.
RC_MSW_FILES =

################################
# d. COMPILER/LINKER OPTIONS
################################

# MACRO DEFINES
# Specify macro defines here, excluding any option prefix (such as "-D"), as it will be
# added automatically. Do not include other compiler flags here. Use the common parameter
# (below) where applicable, and append platform and release/debug specific configuration
# values as required. Example for MSW: NODEBUG WINDOWS
MACRO_COM_DEFS =
MACRO_NIX_REL_DEFS = $(MACRO_COM_DEFS) NODEBUG
MACRO_NIX_DBG_DEFS = $(MACRO_COM_DEFS) DEBUG
MACRO_MSW_REL_DEFS = $(MACRO_COM_DEFS) NODEBUG WINDOWS
MACRO_MSW_DBG_DEFS = $(MACRO_COM_DEFS) DEBUG WINDOWS

# EXTERNAL LIBRARY NAMES
# Specify library names to external libraries, excluding any option prefix (such as "-l"),
# as it will be added automatically. There is no common ("COM") variable here, as the order
# in which libraries are specified is important (the library that needs symbols must be first,
# then the library that resolves those symbols). Do not include other compiler flags here.
# Example, to include "libmyutils.a", simply specify: myutils
EXTLIB_NIX_REL_NAMES =
EXTLIB_NIX_DBG_NAMES =
EXTLIB_MSW_REL_NAMES =
EXTLIB_MSW_DBG_NAMES =

# EXTERNAL LIBRARY PATHS
# Specify directory paths to external libraries, excluding any option prefix (such as "-L"),
# as it will be added automatically. Do not include other compiler flags here. Use the
# common parameter (below) where applicable, and append platform and release/debug specific
# configuration values as required. Use $(MAKE_ROOT) to make paths relative to the makefile.
# Example: $(MAKE_ROOT)/lib
EXTLIB_COM_DIRS =
EXTLIB_NIX_REL_DIRS = $(EXTLIB_COM_DIRS)
EXTLIB_NIX_DBG_DIRS = $(EXTLIB_COM_DIRS)
EXTLIB_MSW_REL_DIRS = $(EXTLIB_COM_DIRS)
EXTLIB_MSW_DBG_DIRS = $(EXTLIB_COM_DIRS)

# CUSTOM COMPILER FLAGS
# Specify additional compiler options (i.e. "-Wall -frtti" etc.), INCLUDING the option
# prefix. Do not include items already specified in the above sections (such as macros),
# as these this be included automatically. There is no common specification for these items,
# and flags must be specified for each target separately. Some key g++ options are as follows:
#   -Wall : Warnings all
#   -frtti : Runtime type identification
#   -fexceptions : Support exceptions
#   -std=c++11 : Enable C++ 11 features
#   -std=c++14 : Enable C++ 14 features
#   -mthreads : Exceptions in multi-threaded code (MinGW only)
#   -g : Debug info
#   -O2 : Optimize (level 2)
# IMPORTANT: Either "-m64" or "-m32" will be added automatically to designate the architecture
# according to the $(ARCH) value. Additionally, the "-fPIC" option is added automatically
# when building a shared object (so) under LINUX. There is no need to add these options below.
CXX_NIX_REL_FLAGS = -Wall -fexceptions -frtti -std=c++11 -O2 -g0
CXX_NIX_DBG_FLAGS = -Wall -fexceptions -frtti -std=c++11 -O0 -g
CXX_MSW_REL_FLAGS = -Wall -fexceptions -frtti -std=c++11 -mthreads -O2 -g0
CXX_MSW_DBG_FLAGS = -Wall -fexceptions -frtti -std=c++11 -mthreads -O0 -g

# CUSTOM LINKER FLAGS
# Specify additional linker flags (i.e. "-s" etc.), INCLUDING the option prefix.
# Do not include items already specified in the above sections, as these
# will be added separately. There is no common specification for these items,
# and flags must be specified for each target separately.
# IMPORTANT: Either "-m64" or "-m32" will be added automatically to designate the architecture
# according to the $(ARCH) value. Additionally, the "-fPIC" option is added automatically
# when building a shared object (so) under LINUX. There is no need to add these options below.
LNK_NIX_REL_FLAGS = -s
LNK_NIX_DBG_FLAGS =
LNK_MSW_REL_FLAGS = -s
LNK_MSW_DBG_FLAGS =

# RESOURCE COMPILER FLAGS
# Specify options for the MSW resource compiler, INCLUDING the option prefix.
RES_MSW_REL_FLAGS =
RES_MSW_DBG_FLAGS = -DDEBUG

################################
# e. PRE/POST BUILD STEPS
################################

# MAKE DEPENDENCIES
# List of optional makefile configurations on which the make should depend. These should be
# other ADXM files (i.e. *.conf) either in the same directory, or relative to it. There's no
# need to explicitly specify the $(MAKE_ROOT) variable, as the make process will automatically
# look here. Sub-modules will be made with the same command line options as supplied to the
# parent make. Example: MAKECONF_DEPS = make-sharedlib.conf make-staticlib.conf
MAKECONF_DEPS =

# PRE-BUILD STEP
# A command automatically invoked PRIOR to building. It is envisaged that this may call a bat
# file on Windows or shell script on LINUX. For filenames, use the $(MAKE_ROOT) variable to
# make them relative to the makefile, rather than the working directory. You can also use
# a target variable, such as $(LTARGET), to distinguish between release and debug builds
# if required. Does nothing if unspecified. Example for LINUX: $(MAKE_ROOT)/prebuild.sh
PREBUILD_NIX =
PREBUILD_MSW =

# POST-BUILD STEP
# A command automatically invoked AFTER linking the output. This may call a simple platform
# specific command, or a bat file on Windows or shell script on LINUX. Use the $(MAKE_ROOT)
# variable to make filenames relative to the makefile, rather than the working directory. You
# can  also use a target variable, such as $(LTARGET), to distinguish between release and debug
# builds if required. Does nothing if unspecified. Example for MSW: $(MAKE_ROOT)/postbuild.bat
POSTBUILD_NIX =
POSTBUILD_MSW =

# DISTRIBUTION POST-BUILD
# A additional command invoked AFTER building when make is called with the "dist" goal.
# This may call a simple platform specific command, or a bat file on Windows or shell script
# on LINUX to create the distribution. Use the $(MAKE_ROOT) variable to make filenames relative
# to the makefile, rather than the working directory. You can  also use a target variable, such
# as $(LTARGET), to distinguish between release and debug builds if required. Does nothing
# if unspecified. Example for LINUX: $(MAKE_ROOT)/create-dist.sh
DISTBUILD_NIX =
DISTBUILD_MSW =

# INSTALL POST-BUILD
# A additional command invoked AFTER building when make is called with the "dist" goal.
# This may call a simple platform specific command, or a bat file on Windows or shell script
# on LINUX to perform installation. Use the $(MAKE_ROOT) variable to make filenames relative
# to the makefile, rather than the working directory. You can  also use a target variable, such
# as $(LTARGET), to distinguish between release and debug builds if required. Does nothing
# if unspecified. Example for LINUX: $(MAKE_ROOT)/perform-install.sh
INSTALLBUILD_NIX =
INSTALLBUILD_MSW =


################################
# f. MISC
################################

# DEBUG OUTPUT SUFFIX
# This will give the build output file an additional suffix for the
# debug build, i.e. "libtest-d.a". Set empty for none.
DOUT_SFX = -d

# DISABLE TARGET OPTION
# Additionally, release and debug targets can be disabled individually by setting
# either flag to any non-empty value. Normally there is no need to change these --
# if you don't want to make debug versions of your code, simply don't bother with the
# debug build flags (above) and don't call make with the debug option. However, if
# you specifically want to deny the user the option of using to build the debug version
# for example, you can set DEBUG_DISABLED to true. Do not disable both. Dooh!
RELEASE_DISABLED =
DEBUG_DISABLED =

# DO NOT MODIFY
# CONFIGURATION VERSION
adxm_confver = 5

#############################################################################
# EOF
#############################################################################
